"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[14760],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>c});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},f=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),s=d(n),f=o,c=s["".concat(p,".").concat(f)]||s[f]||u[f]||i;return n?a.createElement(c,l(l({ref:t},m),{},{components:n})):a.createElement(c,l({ref:t},m))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=f;var r={};for(var p in t)hasOwnProperty.call(t,p)&&(r[p]=t[p]);r.originalType=e,r[s]="string"==typeof e?e:o,l[1]=r;for(var d=2;d<i;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}f.displayName="MDXCreateElement"},2574:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>s,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var a=n(87462),o=(n(67294),n(3905));const i={},l="File upload",r={unversionedId:"extensions/upload",id:"extensions/upload",title:"File upload",description:"It is a common upload component applicable to @midwayjs/faas, @midwayjs/web, @midwayjs/koa, and @midwayjs/express. It supports file (temporary server file) and stream (streaming) modes.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/extensions/upload.md",sourceDirName:"extensions",slug:"/extensions/upload",permalink:"/en/docs/extensions/upload",draft:!1,editUrl:"https://github.com/midwayjs/midway/tree/main/site/docs/extensions/upload.md",tags:[],version:"current",frontMatter:{},sidebar:"component",previous:{title:"Template rendering",permalink:"/en/docs/extensions/render"},next:{title:"Authentication",permalink:"/en/docs/extensions/passport"}},p={},d=[{value:"Use",id:"use",level:2},{value:"Configuration example",id:"configuration-example",level:2},{value:"Upload mode-file",id:"upload-mode-file",level:2},{value:"Upload Mode-stream",id:"upload-mode-stream",level:2},{value:"Configure upload whitelist",id:"configure-upload-whitelist",level:2},{value:"Temporary Documents and Cleanup",id:"temporary-documents-and-cleanup",level:2},{value:"Example of Front-end File Upload",id:"example-of-front-end-file-upload",level:2},{value:"1. The form of html form.",id:"1-the-form-of-html-form",level:3},{value:"2. fetch FormData method",id:"2-fetch-formdata-method",level:3},{value:"Postman test example",id:"postman-test-example",level:2}],m={toc:d};function s(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"file-upload"},"File upload"),(0,o.kt)("p",null,"It is a common upload component applicable to ",(0,o.kt)("inlineCode",{parentName:"p"},"@midwayjs/faas"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"@midwayjs/web"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"@midwayjs/koa"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"@midwayjs/express"),". It supports ",(0,o.kt)("inlineCode",{parentName:"p"},"file")," (temporary server file) and ",(0,o.kt)("inlineCode",{parentName:"p"},"stream")," (streaming) modes."),(0,o.kt)("p",null,"Related information:"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Web support"),(0,o.kt)("th",{parentName:"tr",align:null}))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"@midwayjs/koa"),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"@midwayjs/faas"),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"@midwayjs/web"),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"@midwayjs/express"),(0,o.kt)("td",{parentName:"tr",align:null},"\u2705")))),(0,o.kt)("h2",{id:"use"},"Use"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Installation Dependence")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm i @midwayjs/upload@3 --save\n")),(0,o.kt)("p",null,"Or reinstall the following dependencies in ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "dependencies": {\n    "@midwayjs/upload": "^3.0.0",\n    // ...\n  },\n  "devDependencies": {\n    // ...\n  }\n}\n')),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Introduce components into configuration files")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Configuration } from '@midwayjs/decorator';\nimport * as upload from '@midwayjs/upload';\n\n@Configuration({\n  imports: [\n    // ...other components\n    upload\n  ],\n  }\n})\nexport class MainConfiguration {}\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Get the uploaded file in the code")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Controller, Inject, Post, Files, Fields } from '@midwayjs/decorator';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  ctx;\n\n  @Post('/upload')\n  async upload(@Files() files, @Fields() fields) {\n    /*\n    files = [\n      {\n        filename: 'test.pdf', // file original name\n        Data: '/var/tmp/xxx.pdf', // temporary file address of the server when mode is file\n        fieldname: 'test1', // form field name\n        mimeType: 'application/pdf', // mime\n      },\n      {\n        filename: 'test.pdf', // file original name\n        Data: ReadStream, // temporary file address of the server when mode is stream\n        fieldname: 'test2', // form field name\n        mimeType: 'application/pdf', // mime\n      },\n      // ...file supports uploading multiple files at the same time\n    ]\n\n    */\n    return {\n      files,\n      fields\n    }\n  }\n}\n")),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"If the swagger component is enabled at the same time, be sure to add the type of the upload parameter (the type corresponding to the decorator and the type in the @ApiBody), otherwise an error will be reported. For more information, see the file upload section swagger.")),(0,o.kt)("h2",{id:"configuration-example"},"Configuration example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nimport { uploadWhiteList } from '@midwayjs/upload';\nimport { tmpdir } from 'OS';\nimport { join } from 'path';\n\nexport default {\n  // ...\n  upload: {\n    // mode: UploadMode. The default value is file, which is uploaded to the temporary directory of the server. You can configure it as stream.\n    mode: 'file',\n    // fileSize: string, the maximum size of the uploaded file, which is 10mb by default.\n    fileSize: '10mb',\n    // whitelist: string[], file extension whitelist\n    whitelist: uploadWhiteList.filter(ext => ext !== '.pdf')\n    // tmpdir: string, the temporary storage path of the uploaded file.\n    tmpdir: join(tmpdir(), 'midway-upload-files')\n    // cleanTimeout: number, how long after the uploaded file is automatically deleted in the temporary directory, the default is 5 minutes\n    cleanTimeout: 5*60*1000\n    // base64: boolean, sets whether the original body is in base64 format. The default value is false, which is generally used for compatibility with Tencent Cloud.\n    base64: false\n  },\n}\n\n")),(0,o.kt)("h2",{id:"upload-mode-file"},"Upload mode-file"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"file")," is the default value and is also the recommended value for the framework."),(0,o.kt)("p",null,"Configure the mode of upload as the ",(0,o.kt)("inlineCode",{parentName:"p"},"file")," string, or use the ",(0,o.kt)("inlineCode",{parentName:"p"},"UploadMode.File")," exported from the ",(0,o.kt)("inlineCode",{parentName:"p"},"@midwayjs/upload")," package."),(0,o.kt)("p",null,"When you use the file mode, the ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," obtained from ",(0,o.kt)("inlineCode",{parentName:"p"},"this.ctx.files")," is the temporary file address of the uploaded file on the server. Then, you can use ",(0,o.kt)("inlineCode",{parentName:"p"},"fs.createReadStream")," to obtain the file content."),(0,o.kt)("p",null,"When you use the file mode, you can upload multiple files at the same time. The files are stored in ",(0,o.kt)("inlineCode",{parentName:"p"},"this.ctx.files")," as arrays."),(0,o.kt)("h2",{id:"upload-mode-stream"},"Upload Mode-stream"),(0,o.kt)("p",null,"Configure the ",(0,o.kt)("inlineCode",{parentName:"p"},"stream")," string for the mode of upload, or use the ",(0,o.kt)("inlineCode",{parentName:"p"},"UploadMode.Stream")," exported from the ",(0,o.kt)("inlineCode",{parentName:"p"},"@midwayjs/upload")," package."),(0,o.kt)("p",null,"When you use stream mode, the ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," obtained in ",(0,o.kt)("inlineCode",{parentName:"p"},"this.ctx.files")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"ReadStream"),". You can then use ",(0,o.kt)("inlineCode",{parentName:"p"},"pipe")," to transfer data to other ",(0,o.kt)("inlineCode",{parentName:"p"},"WriteStream")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"TransformStream"),"."),(0,o.kt)("p",null,"When you use the stream mode, only one file is uploaded at the same time. The ",(0,o.kt)("inlineCode",{parentName:"p"},"this.ctx.files")," array contains only one file data object."),(0,o.kt)("h2",{id:"configure-upload-whitelist"},"Configure upload whitelist"),(0,o.kt)("p",null,"Configure the suffix of the uploaded file. If you configure ",(0,o.kt)("inlineCode",{parentName:"p"},"null"),", the suffix of the uploaded file does not check. If the suffix of the uploaded file does not match, the file response will be ",(0,o.kt)("inlineCode",{parentName:"p"},"400")," error. The default value is as follows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"'.jpg',\n'.jpeg',\n'.png',\n'.gif',\n'.bmp',\n'.wbmp',\n'.webp',\n'.tif',\n'.psd',\n'.svg',\n'.js',\n'.jsx',\n'.json',\n'.css',\n'.less',\n'.html',\n'.htm',\n'.xml',\n'.pdf',\n'.zip',\n'.gz',\n'.tgz',\n'.gzip',\n'.mp3',\n'.mp4',\n'.avi',\n")),(0,o.kt)("p",null,"You can obtain the default suffix whitelist from the ",(0,o.kt)("inlineCode",{parentName:"p"},"uploadWhiteList")," exported in the ",(0,o.kt)("inlineCode",{parentName:"p"},"@midwayjs/upload")," package."),(0,o.kt)("h2",{id:"temporary-documents-and-cleanup"},"Temporary Documents and Cleanup"),(0,o.kt)("p",null,"If you use the ",(0,o.kt)("inlineCode",{parentName:"p"},"file")," mode to obtain the uploaded files, the uploaded files are stored in the folder that you set in the ",(0,o.kt)("inlineCode",{parentName:"p"},"config")," file to the ",(0,o.kt)("inlineCode",{parentName:"p"},"tmpdir")," option in the ",(0,o.kt)("inlineCode",{parentName:"p"},"upload")," component configuration."),(0,o.kt)("p",null,"You can control the automatic temporary file cleaning time by using ",(0,o.kt)("inlineCode",{parentName:"p"},"cleanTimeout")," in the configuration. The default value is ",(0,o.kt)("inlineCode",{parentName:"p"},"5*60*1000"),", that is, the uploaded file will be automatically cleaned after ",(0,o.kt)("inlineCode",{parentName:"p"},"5 minutes"),". If it is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"0"),", the automatic cleaning function will not be turned on."),(0,o.kt)("p",null,"You can also actively clean up the temporary files currently requested to be uploaded by calling ",(0,o.kt)("inlineCode",{parentName:"p"},"await ctx.cleanupRequestFiles()")," in your code."),(0,o.kt)("h2",{id:"example-of-front-end-file-upload"},"Example of Front-end File Upload"),(0,o.kt)("h3",{id:"1-the-form-of-html-form"},"1. The form of html form."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-html"},'<form action="/api/upload" method="post" enctype="multipart/form-data">\n  Name: <input type="text" name="name" /><br />\n  File: <input type="file" name="testFile" /><br />\n  <input type="submit" value="Submit" />\n</form>\n')),(0,o.kt)("h3",{id:"2-fetch-formdata-method"},"2. fetch FormData method"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const fileInput = document.querySelector('#your-file-input');\nconst formData = new FormData();\nformData.append('file', fileInput.files[0]);\n\nfetch('/api/upload', {\n  method: 'POST',\n  body: formData\n});\n")),(0,o.kt)("h2",{id:"postman-test-example"},"Postman test example"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://img.alicdn.com/imgextra/i4/O1CN01iv9ESW1uIShNiRjBF_!!6000000006014-2-tps-2086-1746.png",alt:null})))}s.isMDXComponent=!0}}]);