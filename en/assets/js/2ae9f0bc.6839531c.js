"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[16296],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,f=d["".concat(s,".").concat(m)]||d[m]||c[m]||r;return t?a.createElement(f,l(l({ref:n},u),{},{components:t})):a.createElement(f,l({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=m;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[d]="string"==typeof e?e:o,l[1]=i;for(var p=2;p<r;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},75362:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=t(87462),o=(t(67294),t(3905));const r={},l="File Upload",i={unversionedId:"hooks/upload",id:"hooks/upload",title:"File Upload",description:"Midway Hooks provides @midwayjs/hooks-upload and cooperates with @midwayjs/upload to realize file upload function in pure function + integrated project.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/hooks/upload.md",sourceDirName:"hooks",slug:"/hooks/upload",permalink:"/en/docs/hooks/upload",draft:!1,editUrl:"https://github.com/midwayjs/midway/tree/main/site/docs/hooks/upload.md",tags:[],version:"current",frontMatter:{},sidebar:"common",previous:{title:"Static type safety + runtime safety",permalink:"/en/docs/hooks/safe"},next:{title:"Full stack kit",permalink:"/en/docs/hooks/fullstack"}},s={},p=[{value:"Start",id:"start",level:2},{value:"Use",id:"use",level:2},{value:"Enable upload components",id:"enable-upload-components",level:3},{value:"Create interface",id:"create-interface",level:3},{value:"Api",id:"api",level:2},{value:"Upload(path?: string)",id:"uploadpath-string",level:3},{value:"useFiles()",id:"usefiles",level:3},{value:"useFields()",id:"usefields",level:3}],u={toc:p},d="wrapper";function c(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"file-upload"},"File Upload"),(0,o.kt)("p",null,"Midway Hooks provides ",(0,o.kt)("inlineCode",{parentName:"p"},"@midwayjs/hooks-upload")," and cooperates with ",(0,o.kt)("inlineCode",{parentName:"p"},"@midwayjs/upload")," to realize file upload function in pure function + integrated project."),(0,o.kt)("h2",{id:"start"},"Start"),(0,o.kt)("p",null,"Installation dependency:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @midwayjs/upload @midwayjs/hooks-upload\n")),(0,o.kt)("h2",{id:"use"},"Use"),(0,o.kt)("h3",{id:"enable-upload-components"},"Enable upload components"),(0,o.kt)("p",null,"Enable the ",(0,o.kt)("inlineCode",{parentName:"p"},"@midwayjs/upload")," component in the ",(0,o.kt)("inlineCode",{parentName:"p"},"configuration.ts")," of the backend directory. For more information about the supported configuration items, see ",(0,o.kt)("a",{parentName:"p",href:"/docs/extensions/upload"},"file upload"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"import { createConfiguration, hooks } from '@midwayjs/hooks';\nimport * as Koa from '@midwayjs/koa';\n+ import * as upload from '@midwayjs/upload';\n\n/**\n * setup midway server\n */\nexport default createConfiguration({\n  imports: [\n    Koa\n    hooks()\n+ upload\n  ],\n  importConfigs: [{ default: { keys: 'session_keys' } }]\n});\n")),(0,o.kt)("h3",{id:"create-interface"},"Create interface"),(0,o.kt)("p",null,"In the backend directory, create a new interface file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { Api } from '@midwayjs/hooks';\nimport {\n  Upload\n  useFiles\n} from '@midwayjs/hooks-upload';\n\nexport default Api (\n  Upload('/api/upload')\n  async () => {\n    const files = useFiles();\n    return files;\n  }\n);\n")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Integrated call")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},'import upload from \'./api/upload\';\n\nfunction Form() {\n  const [file, setFile] =\n    React.useState<FileList>(null);\n\n  const handleSubmit = async (\n    e: React.FormEvent<HTMLFormElement>\n  ) => {\n    e.preventDefault();\n    const files = { images: file };\n    const response = await upload({\n      files\n    });\n    console.log(response);\n  };\n\n  const handleOnChange = (\n    e: React.ChangeEvent<HTMLInputElement>\n  ) => {\n    console.log(e.target.files);\n    setFile(e.target.files);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h1>Hooks File Upload</h1>\n      <input\n        multiple\n        type="file"\n        onChange={handleOnChange}\n      />\n      <button type="submit">\n        Upload\n      </button>\n    </form>\n  );\n}\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Manual call (uploaded via FormData)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const input =\n  document.getElementById('file');\n\nconst formdata = new FormData();\nformdata.append('file', input.files[0]);\n\nfetch('/api/upload', {\n  method: 'POST',\n  body: formdata\n})\n  .then((res) => res.json())\n  .then((res) => console.log(res));\n")),(0,o.kt)("h2",{id:"api"},"Api"),(0,o.kt)("h3",{id:"uploadpath-string"},"Upload(path?: string)"),(0,o.kt)("p",null,"Declare the upload interface, which can specify the path. By default, the ",(0,o.kt)("inlineCode",{parentName:"p"},"POST")," interface supports only requests of the ",(0,o.kt)("inlineCode",{parentName:"p"},"multipart/form-data")," type."),(0,o.kt)("h3",{id:"usefiles"},"useFiles()"),(0,o.kt)("p",null,"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"useFiles()")," in the function to get the uploaded file. The return value is Object, and the key is the field name at the time of upload. When multiple file field names are the same, Value is Array."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// frontend\nawait upload({ pdf });\n\n// backend\nconst files = useFiles();\n{\n  pdf: {\n    filename: 'test.pdf', // file original name\n    Data: '/var/tmp/xxx.pdf', // temporary file address of the server when mode is file\n    fieldname: 'test1', // form field name\n    mimeType: 'application/pdf', // mime\n  }\n}\n")),(0,o.kt)("h3",{id:"usefields"},"useFields()"),(0,o.kt)("p",null,"Returns fields FormData non-files."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"// frontend\nconst formdata = new FormData();\nformdata.append('name', 'test');\n\npost(formdata);\n\n// backend\nconst fields = useFields();\n// { name: 'test'}\n")))}c.isMDXComponent=!0}}]);