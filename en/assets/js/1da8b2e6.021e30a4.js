"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3659],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8670:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={},o="Front-end request client",l={unversionedId:"hooks/client",id:"hooks/client",title:"Front-end request client",description:"In Midway Hooks' full stack application, we use @midwayjs/rpc as the default request client. All generated interfaces call the server through @midwayjs/rpc.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/hooks/client.md",sourceDirName:"hooks",slug:"/hooks/client",permalink:"/en/docs/hooks/client",draft:!1,editUrl:"https://github.com/midwayjs/midway/tree/main/site/docs/hooks/client.md",tags:[],version:"current",frontMatter:{},sidebar:"hooks",previous:{title:"Full stack kit",permalink:"/en/docs/hooks/fullstack"},next:{title:"Deployment",permalink:"/en/docs/hooks/deploy"}},s={},p=[{value:"Configuration",id:"configuration",level:2},{value:"baseURL: string",id:"baseurl-string",level:3},{value:"withCredentials: boolean",id:"withcredentials-boolean",level:3},{value:"fetcher: Fetcher",id:"fetcher-fetcher",level:3},{value:"middleware: Middleware []",id:"middleware-middleware-",level:3}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"front-end-request-client"},"Front-end request client"),(0,a.kt)("p",null,"In Midway Hooks' full stack application, we use ",(0,a.kt)("inlineCode",{parentName:"p"},"@midwayjs/rpc")," as the default request client. All generated interfaces call the server through ",(0,a.kt)("inlineCode",{parentName:"p"},"@midwayjs/rpc"),"."),(0,a.kt)("h2",{id:"configuration"},"Configuration"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"@midwayjs/rpc")," provides ",(0,a.kt)("inlineCode",{parentName:"p"},"setupHttpClient")," methods to configure the requesting client (\ud83d\udce2The ",(0,a.kt)("inlineCode",{parentName:"p"},"setupHttpClient")," should be placed at the entrance of the front-end code.)."),(0,a.kt)("p",null,"The supported configuration items are as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"type SetupOptions = {\n  baseURL?: string;\n  withCredentials?: boolean;\n  fetcher?: Fetcher;\n  middleware?: Middleware[];\n};\n\ntype Fetcher = (\n  req: HttpRequestOptions\n  options: SetupOptions\n) => Promise<any>;\n\ntype Middleware = (\n  ctx: Context\n  next: () => Promise<any>\n) => void;\n\ntype Context = {\n  req: HttpRequestOptions;\n  res: any;\n};\n\ntype HttpRequestOptions = {\n  url: string;\n  method: HttpMethod;\n  data ?: {\n    args: any[];\n  };\n\n  // query & headers\n  query?: Record<string, string>;\n  headers?: Record<string, string>;\n};\n")),(0,a.kt)("h3",{id:"baseurl-string"},"baseURL: string"),(0,a.kt)("p",null,"The basic URL of the request. Default value:",(0,a.kt)("inlineCode",{parentName:"p"},"/"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { setupHttpClient } from '@midwayjs/rpc';\n\nsetupHttpClient({\n  baseURL:\n    process.env.NODE_ENV ===\n    'development'\n      ? 'http://localhost:7001'\n      : 'https://api.example.com',\n});\n")),(0,a.kt)("h3",{id:"withcredentials-boolean"},"withCredentials: boolean"),(0,a.kt)("p",null,"Default value: ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),". For more information, see ",(0,a.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/withCredentials"},"MDN"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { setupHttpClient } from '@midwayjs/rpc';\n\nsetupHttpClient({\n  withCredentials: true\n});\n")),(0,a.kt)("h3",{id:"fetcher-fetcher"},"fetcher: Fetcher"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"@midwayjs/rpc")," uses ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/developit/redaxios"},"redaxios")," as the request client by default, a mini client that follows the axios api."),(0,a.kt)("p",null,"By setting the ",(0,a.kt)("inlineCode",{parentName:"p"},"fetcher"),", you can replace the default requesting client. In this example, ",(0,a.kt)("inlineCode",{parentName:"p"},"axios")," is used as the default request client."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import axios from 'axios';\nimport { setupHttpClient } from '@midwayjs/rpc';\nimport type { Fetcher } from '@midwayjs/rpc';\n\nconst fetcher: Fetcher = async (\n  req\n  options\n) => {\n  const response = await axios({\n    method: req.method\n    url: req.url\n    data: req.data\n    params: req.query\n    headers: req.headers\n    baseURL: options.baseURL\n    withCredentials:\n      options.withCredentials\n  });\n  return response.data;\n};\n\nsetupHttpClient({ fetcher });\n")),(0,a.kt)("h3",{id:"middleware-middleware-"},"middleware: Middleware []"),(0,a.kt)("p",null,"In ",(0,a.kt)("inlineCode",{parentName:"p"},"@midwayjs/rpc"),", we can set up middleware for printing parameters, return value handling errors, etc."),(0,a.kt)("p",null,"Take printing the address and return value of the current request as an example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { setupHttpClient } from '@midwayjs/rpc';\nimport type { Middleware } from '@midwayjs/rpc';\n\nconst logger: Middleware = async (\n  ctx\n  next\n) => {\n  console.log('<-- ${ctx.req.url}');\n  await next();\n  console.log (\n    '--\x3e ${ctx.req.url} ${ctx.res}'\n  );\n};\n\nsetupHttpClient({\n  middleware: [logger]\n});\n")),(0,a.kt)("p",null,"You can also use it to handle errors uniformly:"),(0,a.kt)("p",null,"When using the default ",(0,a.kt)("inlineCode",{parentName:"p"},"fetcher"),", the ",(0,a.kt)("inlineCode",{parentName:"p"},"err")," type refers to ",(0,a.kt)("a",{parentName:"p",href:"https://axios-http.com/docs/res_schema"},"Axios Response Schema"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { setupHttpClient } from '@midwayjs/rpc';\nimport type { Middleware } from '@midwayjs/rpc';\n\nconst ErrorHandler: Middleware = async (\n  ctx\n  next\n) => {\n  try {\n    await next();\n  } catch (err) {\n    switch (err.status) {\n      case 401:\n        location.href = '/login';\n        break;\n      case 500:\n        alert('Internal Server Error');\n        break;\n      default:\n        alert (\n          'Unknown Error, status: ${err.status}'\n        );\n        break;\n    }\n  }\n};\n\nsetupHttpClient({\n  middleware: [ErrorHandler]\n});\n")))}d.isMDXComponent=!0}}]);