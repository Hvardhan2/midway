"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[15467],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),g=a,d=u["".concat(l,".").concat(g)]||u[g]||m[g]||i;return n?r.createElement(d,s(s({ref:t},p),{},{components:n})):r.createElement(d,s({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=g;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},21274:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const i={},s="CMQ trigger (message queue)",o={unversionedId:"serverless/tencent_trigger_cmq",id:"serverless/tencent_trigger_cmq",title:"CMQ trigger (message queue)",description:"CMQ(mq) triggers subscribe to Tencent Cloud's message queue service.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/serverless/tencent_trigger_cmq.md",sourceDirName:"serverless",slug:"/serverless/tencent_trigger_cmq",permalink:"/en/docs/serverless/tencent_trigger_cmq",draft:!1,editUrl:"https://github.com/midwayjs/midway/tree/main/site/docs/serverless/tencent_trigger_cmq.md",tags:[],version:"current",frontMatter:{}},l={},c=[{value:"Usage",id:"usage",level:2},{value:"CMS trigger configuration",id:"cms-trigger-configuration",level:2},{value:"Event structure",id:"event-structure",level:2},{value:"Local development",id:"local-development",level:2},{value:"Local test",id:"local-test",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"cmq-trigger-message-queue"},"CMQ trigger (message queue)"),(0,a.kt)("p",null,"CMQ(mq) triggers subscribe to Tencent Cloud's message queue service."),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Provide, Inject, ServerlessTrigger, ServerlessTriggerType } from '@midwayjs/decorator';\nimport { Context, SCF } from '@midwayjs/faas';\n\n@Provide()\nexport class HelloTencentService {\n  @Inject()\n  ctx: Context;\n\n  @ServerlessTrigger(ServerlessTriggerType.MQ, {\n    topic: 'test-topic',\n    tags: 'bbb',\n  })\n  async handleCMQEvent(event: SCF.CMQEvent) {\n    // xxx\n  }\n}\n")),(0,a.kt)("p",null,"After ",(0,a.kt)("inlineCode",{parentName:"p"},"f deploy"),"."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Note that under Tencent Cloud, the default message queue format provided by midway faas is JSON")),(0,a.kt)("h2",{id:"cms-trigger-configuration"},"CMS trigger configuration"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Attribute name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"topic"),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"topic for receiving messages")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"tags"),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"optional, which describes the tags of message filtering in the subscription (only messages with consistent tags will be pushed)")))),(0,a.kt)("p",null,"Example:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Monitor MQ messages")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"@ServerlessTrigger(ServerlessTriggerType.MQ, {\n  topic: 'test-topic',\n  region: 'cn-shanghai'\n  strategy: 'BACKOFF_RETRY'\n})\n")),(0,a.kt)("h2",{id:"event-structure"},"Event structure"),(0,a.kt)("p",null,"The structure returned by CMQ messages is as follows and is described in the type of ",(0,a.kt)("inlineCode",{parentName:"p"},"SCF.CMQEvent"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "Records": [\n    {\n      "CMQ": {\n        "type": "topic ",\n        "topicOwner": 1567,\n        "topicName": "testtopic",\n        "subscriptionName": "xxxxxx ",\n        "publishTime": "1970-01-01T00:00:00.000Z ",\n        "msgId": "123345346 ",\n        "requestId": "123345346 ",\n        "msgBody": "Hello from CMQ! ",\n        "msgTag": "tag1,tag2"\n      }\n    }\n  ]\n}\n')),(0,a.kt)("h2",{id:"local-development"},"Local development"),(0,a.kt)("p",null,"You cannot use dev to develop events locally. You can only run the ",(0,a.kt)("inlineCode",{parentName:"p"},"npm run test")," command to run tests."),(0,a.kt)("h2",{id:"local-test"},"Local test"),(0,a.kt)("p",null,"Unlike HTTP testing, the function app is created by ",(0,a.kt)("inlineCode",{parentName:"p"},"createFunctionApp"),", and the instance of the entire class is obtained by ",(0,a.kt)("inlineCode",{parentName:"p"},"getServerlessInstance"),", thus calling a specific method to test."),(0,a.kt)("p",null,"You can quickly create the structure passed in by the platform by ",(0,a.kt)("inlineCode",{parentName:"p"},"createCMQEvent")," methods."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createFunctionApp, close } from '@midwayjs/mock';\nimport { Framework, Application } from '@midwayjs/serverless-app';\nimport { HelloTencentService } from '../src/function/hello_tencent';\nimport { createCMQEvent } from '@midwayjs/serverless-scf-trigger';\nimport { join } from 'path';\n\ndescribe('test/hello_tencent.test.ts', () => {\n  let app: Application;\n  let instance: HelloTencentService;\n\n  beforeAll(async () => {\n    // create app\n    app = await createFunctionApp<Framework>(join(__dirname, '../'), {\n      initContext: createInitializeContext()\n    });\n    instance = await app.getServerlessInstance<HelloTencentService>(HelloTencentService);\n  });\n\n  afterAll(async () => {\n    await close(app);\n  });\n\n  it('should get result from cmq trigger', async () => {\n    expect(await instance.handleCMQEvent(createCMQEvent())).toEqual('hello world');\n  });\n});\n")))}m.isMDXComponent=!0}}]);