"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[76474],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=c(n),d=a,g=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return n?r.createElement(g,l(l({ref:t},p),{},{components:n})):r.createElement(g,l({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},64054:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const i={},l="Timer trigger (timed task)",o={unversionedId:"serverless/tencent_trigger_timer",id:"serverless/tencent_trigger_timer",title:"Timer trigger (timed task)",description:"A timed task trigger is used to periodically execute a function. Tencent Cloud Timer Trigger currently only supports cron format.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/serverless/tencent_trigger_timer.md",sourceDirName:"serverless",slug:"/serverless/tencent_trigger_timer",permalink:"/en/docs/serverless/tencent_trigger_timer",draft:!1,editUrl:"https://github.com/midwayjs/midway/tree/main/site/docs/serverless/tencent_trigger_timer.md",tags:[],version:"current",frontMatter:{}},s={},c=[{value:"Usage",id:"usage",level:2},{value:"Timer configuration",id:"timer-configuration",level:2},{value:"Event structure",id:"event-structure",level:2},{value:"Local development",id:"local-development",level:2},{value:"Local test",id:"local-test",level:2}],p={toc:c},m="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"timer-trigger-timed-task"},"Timer trigger (timed task)"),(0,a.kt)("p",null,"A timed task trigger is used to periodically execute a function. Tencent Cloud Timer Trigger currently only supports cron format."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"Warm reminder, please close the trigger in time after testing the function and execute it automatically to avoid over-deduction.")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Provide, Inject, ServerlessTrigger, ServerlessTriggerType } from '@midwayjs/core';\nimport { Context, SCF } from '@midwayjs/faas';\n\n@Provide()\nexport class HelloTencentService {\n  @Inject()\n  ctx: Context;\n\n  @ServerlessTrigger(ServerlessTriggerType.TIMER, {\n    type: 'cron',\n    value: '*/60 * * * * * *', // trigger every 60s\n  })\n  async handleTimerEvent(event: SCF.TimerEvent) {\n    this.ctx.logger.info(event);\n    return 'hello world';\n  }\n}\n")),(0,a.kt)("p",null,"Note that Tencent Cloud is set to full Cron. For more information about the Cron format, see ",(0,a.kt)("a",{parentName:"p",href:"https://cloud.tencent.com/document/product/583/9708"},"Development documentation"),"."),(0,a.kt)("p",null,"Common format:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"*/5 * * * * * indicates that it is triggered every 5 seconds.\n0 0 2 1 * * * indicates that it is triggered at 2: 00 a.m. on the 1st of each month.\n0 15 10 * * MON-FRI * means it will be triggered at 10:15 a.m. every day from Monday to Friday.\n0 0 10,14,16 * * * * means to trigger at 10: 00 a.m., 2: 00 p.m. and 4: 00 p.m. every day\n0 */30 9-17 * * * * means every half hour from 9: 00 a.m. to 5: 00 p.m.\n0 0 12 * * WED * means to trigger at 12 noon every Wednesday\n")),(0,a.kt)("p",null,"Run ",(0,a.kt)("inlineCode",{parentName:"p"},"npm run deploy"),"."),(0,a.kt)("h2",{id:"timer-configuration"},"Timer configuration"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Attribute name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"type"),(0,a.kt)("td",{parentName:"tr",align:null},"cron"),(0,a.kt)("td",{parentName:"tr",align:null},"Required, trigger type, representing cron expression.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"value"),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"Required, cron expression or every value.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"payload"),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"Optional, a fixed passed value, rarely used")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null})))),(0,a.kt)("p",null,"Example:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"cron expression")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"@ServerlessTrigger(ServerlessTriggerType.TIMER, {\n  type: 'cron',\n  value: '0 0 4 * * *', //triggered at 4:00 every day\n})\n")),(0,a.kt)("h2",{id:"event-structure"},"Event structure"),(0,a.kt)("p",null,"The structure returned by the Timer message is as follows and is described in the ",(0,a.kt)("inlineCode",{parentName:"p"},"SCF.TimerEvent")," type."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},"{\n  Message: '',\n  Time: new Date().toJSON()\n  TriggerName: 'test',\n  Type: 'Timer',\n}\n")),(0,a.kt)("h2",{id:"local-development"},"Local development"),(0,a.kt)("p",null,"You cannot use dev to develop events locally. You can only run the ",(0,a.kt)("inlineCode",{parentName:"p"},"npm run test")," command to run tests."),(0,a.kt)("h2",{id:"local-test"},"Local test"),(0,a.kt)("p",null,"Unlike HTTP testing, the function app is created by ",(0,a.kt)("inlineCode",{parentName:"p"},"createFunctionApp"),", and the instance of the entire class is obtained by ",(0,a.kt)("inlineCode",{parentName:"p"},"getServerlessInstance"),", thus calling a specific method to test."),(0,a.kt)("p",null,"You can quickly create the structure passed in by the platform by ",(0,a.kt)("inlineCode",{parentName:"p"},"createTimerEvent")," methods."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createFunctionApp, close } from '@midwayjs/mock';\nimport { Framework, Application } from '@midwayjs/serverless-app';\nimport { HelloTencentService } from '../src/function/hello_tencent';\nimport { createTimerEvent } from '@midwayjs/serverless-scf-trigger';\nimport { join } from 'path';\n\ndescribe('test/hello_tencent.test.ts', () => {\n  let app: Application;\n  let instance: HelloTencentService;\n\n  beforeAll(async () => {\n    // create app\n    app = await createFunctionApp<Framework>();\n    instance = await app.getServerlessInstance<HelloTencentService>(HelloTencentService);\n  });\n\n  afterAll(async () => {\n    await close(app);\n  });\n\n  it('should get result from timer trigger', async () => {\n    expect(await instance.handleTimerEvent(createTimerEvent())).toEqual('hello world');\n  });\n});\n")))}u.isMDXComponent=!0}}]);