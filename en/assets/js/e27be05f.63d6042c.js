"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9710],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>c});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),d=p(n),c=i,k=d["".concat(s,".").concat(c)]||d[c]||m[c]||o;return n?a.createElement(k,l(l({ref:t},u),{},{components:n})):a.createElement(k,l({ref:t},u))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=d;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:i,l[1]=r;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1674:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const o={},l="Easy Mode & Filesystem Routing",r={unversionedId:"hooks/file-route",id:"hooks/file-route",title:"Easy Mode & Filesystem Routing",description:"Simple mode",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/hooks/file-route.md",sourceDirName:"hooks",slug:"/hooks/file-route",permalink:"/en/docs/hooks/file-route",draft:!1,editUrl:"https://github.com/midwayjs/midway/tree/main/site/docs/hooks/file-route.md",tags:[],version:"current",frontMatter:{},sidebar:"hooks",previous:{title:"Project configuration",permalink:"/en/docs/hooks/config"},next:{title:"Static type safety + runtime safety",permalink:"/en/docs/hooks/safe"}},s={},p=[{value:"Simple mode",id:"simple-mode",level:2},{value:"Get request",id:"get-request",level:3},{value:"Post request",id:"post-request",level:3},{value:"Create a route by using <code>Api()</code>",id:"create-a-route-by-using-api",level:3},{value:"File system routing",id:"file-system-routing",level:2},{value:"Index routing",id:"index-routing",level:3},{value:"Nested routing",id:"nested-routing",level:3},{value:"Export method and corresponding route",id:"export-method-and-corresponding-route",level:3},{value:"wildwith routing",id:"wildwith-routing",level:3},{value:"Path parameters",id:"path-parameters",level:3}],u={toc:p};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"easy-mode--filesystem-routing"},"Easy Mode & Filesystem Routing"),(0,i.kt)("h2",{id:"simple-mode"},"Simple mode"),(0,i.kt)("p",null,"In Midway Hooks, we provide a simple mode that can use pure functions to quickly create interfaces."),(0,i.kt)("p",null,"\ud83d\udce2Note:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"In the simple mode, you must enable the file routing system. You must enable the ",(0,i.kt)("inlineCode",{parentName:"li"},"routes")," configuration in ",(0,i.kt)("inlineCode",{parentName:"li"},"midway.config.js"),"."),(0,i.kt)("li",{parentName:"ul"},"Routes automatically generated by pure functions only support ",(0,i.kt)("inlineCode",{parentName:"li"},"GET")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"POST")," methods, and in full-stack applications, passing ",(0,i.kt)("inlineCode",{parentName:"li"},"Query / Params / Header")," parameters is not supported"),(0,i.kt)("li",{parentName:"ul"},"In simple mode, ",(0,i.kt)("inlineCode",{parentName:"li"},"Api()")," can still be used to define routes, and manual path definition is supported. ",(0,i.kt)("inlineCode",{parentName:"li"},"basePath")," will be added to the spliced path automatically.")),(0,i.kt)("h3",{id:"get-request"},"Get request"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { useContext } from '@midwayjs/hooks';\n\nexport async function getPath() {\n  // Get HTTP request context by Hooks\n  const ctx = useContext();\n  return ctx.path;\n}\n")),(0,i.kt)("p",null,"Integrated call:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { getPath } from './api/lambda';\nconst path = await getPath();\nconsole.log(path); // /api/getPath\n")),(0,i.kt)("p",null,"Manual call:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"fetcher\n  .get('/api/getPath')\n  .then((res) => {\n    console.log(res.data); // /api/getPath\n  });\n")),(0,i.kt)("h3",{id:"post-request"},"Post request"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { useContext } from '@midwayjs/hooks';\n\nexport async function post (\n  name: string\n) {\n  const ctx = useContext();\n\n  return {\n    message: 'Hello ${name}!',\n    method: ctx.method\n  };\n}\n")),(0,i.kt)("p",null,"Integrated call:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { post } from './api/lambda';\nconst response = await post('Midway');\nconsole.log(response.data); // { message: 'Hello Midway!', method: 'POST'}\n")),(0,i.kt)("p",null,"Manual call:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"fetch('/api/post', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    args: ['Midway']\n  }),\n}).then((res) => {\n  console.log(res.data); // { message: 'Hello Midway!', method: 'POST'}\n});\n")),(0,i.kt)("h3",{id:"create-a-route-by-using-api"},"Create a route by using ",(0,i.kt)("inlineCode",{parentName:"h3"},"Api()")),(0,i.kt)("p",null,"In simple mode, you can still use ",(0,i.kt)("inlineCode",{parentName:"p"},"Api()")," to create routes."),(0,i.kt)("p",null,"Invalid example: ",(0,i.kt)("inlineCode",{parentName:"p"},"Api(Get('/specify_path'))"),". Manual path specification is not supported in simple mode."),(0,i.kt)("p",null,"A valid example, two routes are exported."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n  Api\n  Get\n} from '@midwayjs/hooks';\nimport { useContext } from '@midwayjs/hooks';\n\nexport async function getPath() {\n  // Get HTTP request context by Hooks\n  const ctx = useContext();\n  return ctx.path;\n}\n\nexport default Api(Get(), async () => {\n  return 'Hello Midway!';\n});\n")),(0,i.kt)("h2",{id:"file-system-routing"},"File system routing"),(0,i.kt)("p",null,"Enable the ",(0,i.kt)("inlineCode",{parentName:"p"},"routes")," configuration in ",(0,i.kt)("inlineCode",{parentName:"p"},"midway.config.js")," to enable the file routing system and easy mode."),(0,i.kt)("p",null,"The configuration example is as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { defineConfig } from '@midwayjs/hooks';\n\nexport default defineConfig({\n  source: './src/apis',\n  routes: [\n    {\n      baseDir: 'lambda',\n      basePath: '/api',\n    },\n  ],\n});\n")),(0,i.kt)("p",null,"Field explanation:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"source: The backend directory. Default value: ",(0,i.kt)("inlineCode",{parentName:"li"},"./src/apis"),". You can also specify custom directories such as ",(0,i.kt)("inlineCode",{parentName:"li"},"./src/functions"),"."),(0,i.kt)("li",{parentName:"ul"},"routes: routing configuration. the default is an array.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"baseDir: Function folder, asynchronous functions exported from any ",(0,i.kt)("inlineCode",{parentName:"li"},".ts")," file under the folder will be generated as Api interface"),(0,i.kt)("li",{parentName:"ul"},"basePath: generated Api address prefix")))),(0,i.kt)("h3",{id:"index-routing"},"Index routing"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"index.ts")," file in the directory is used as the root route."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/lambda/index.ts")," \u2192",(0,i.kt)("inlineCode",{parentName:"li"},"/")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/lambda/about/index.ts")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"/about"))),(0,i.kt)("h3",{id:"nested-routing"},"Nested routing"),(0,i.kt)("p",null,"Nested files will also generate nested routes ",(0,i.kt)("br",null)),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/lambda/about.ts")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"/about")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/lambda/blog/index.ts")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"/blog")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/lambda/about/contact.ts")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"/about/contact"))),(0,i.kt)("h3",{id:"export-method-and-corresponding-route"},"Export method and corresponding route"),(0,i.kt)("p",null,"The default exported method is generated as the root path, while the named method splices the function name on the path."),(0,i.kt)("p",null,"The following example uses ",(0,i.kt)("inlineCode",{parentName:"p"},"/lambda/about.ts")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"export default () => {}")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"/about")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"export function contact ()")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"/about/contact"))),(0,i.kt)("h3",{id:"wildwith-routing"},"wildwith routing"),(0,i.kt)("p",null,"If you need to generate a wildcard route, such as ",(0,i.kt)("inlineCode",{parentName:"p"},"/api/*"),", it is used to match/api,/api/about,/api/about/a/B/c. The file name is ",(0,i.kt)("inlineCode",{parentName:"p"},"[...file]"),"."),(0,i.kt)("p",null,"\ud83d\udce2It is recommended that only ",(0,i.kt)("inlineCode",{parentName:"p"},"export default")," is used to export functions in wildcard routes to avoid unnecessary route conflicts."),(0,i.kt)("p",null,"Example:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/lambda/[...index].ts")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"/api/*")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/lambda/[...user].ts")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"/api/user/*")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/lambda/about/[...contact].ts")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"/api/about/contact/*"))),(0,i.kt)("h3",{id:"path-parameters"},"Path parameters"),(0,i.kt)("p",null,"If you need to generate dynamic path parameters, the file name can be named in the ",(0,i.kt)("inlineCode",{parentName:"p"},"[file]")," format."),(0,i.kt)("p",null,"Examples:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/lambda/[name]/project.ts")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"/api/about/:name/project"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"/about/midwayjs/project -> { name: 'midwayjs'}"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"/lambda/[type]/[page].ts")," \u2192 ",(0,i.kt)("inlineCode",{parentName:"li"},"/api/about/:type/:page"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"/blog/1 -> { type: 'blog', page: '1'}"),(0,i.kt)("li",{parentName:"ul"},"/articles/3 -> { type: 'articles', page: '3'}")))),(0,i.kt)("p",null,"When you use the path parameters, you can only use ",(0,i.kt)("inlineCode",{parentName:"p"},"Api()")," to develop backend interfaces and use ",(0,i.kt)("inlineCode",{parentName:"p"},"Params<T>")," to mark types."),(0,i.kt)("p",null,"Take ",(0,i.kt)("inlineCode",{parentName:"p"},"/lambda/[name]/Project. ts")," as an example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// lambda/[name]/project.ts\nimport {\n  Api\n  Get\n  Params\n  useContext\n} from '@midwayjs/hooks';\n\nexport default Api (\n  Get()\n  Params<{ name: string }>()\n  async () => {\n    const ctx = useContext();\n    return {\n      name: ctx.params.name\n    };\n  }\n);\n")),(0,i.kt)("p",null,"Integrated call:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import getProject from './api/[name]/project';\nconst response = await getProject({\n  params: { name: 'midwayjs'}\n});\nconsole.log(response); // { name: 'midwayjs'}\n")),(0,i.kt)("p",null,"Manual call:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"fetch('/api/about/midwayjs/project')\n  .then((res) => res.json())\n  .then((res) => console.log(res)); // { name: 'midwayjs'}\n")))}m.isMDXComponent=!0}}]);