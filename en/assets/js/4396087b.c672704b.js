"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[69941],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>u});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(t),u=a,f=m["".concat(s,".").concat(u)]||m[u]||c[u]||i;return t?r.createElement(f,o(o({ref:n},d),{},{components:t})):r.createElement(f,o({ref:n},d))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},64785:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=t(87462),a=(t(67294),t(3905));const i={},o="Express",l={unversionedId:"extensions/express",id:"extensions/express",title:"Express",description:"This chapter mainly introduces how to use Express as the upper-level framework in Midway and use its own capabilities.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/extensions/express.md",sourceDirName:"extensions",slug:"/extensions/express",permalink:"/en/docs/extensions/express",draft:!1,editUrl:"https://github.com/midwayjs/midway/tree/main/site/docs/extensions/express.md",tags:[],version:"current",frontMatter:{},sidebar:"component",previous:{title:"EggJS",permalink:"/en/docs/extensions/egg"},next:{title:"Security",permalink:"/en/docs/extensions/security"}},s={},p=[{value:"Installation dependency",id:"installation-dependency",level:2},{value:"Directory structure",id:"directory-structure",level:2},{value:"Open the component",id:"open-the-component",level:2},{value:"Controller",id:"controller",level:2},{value:"Web middleware",id:"web-middleware",level:2},{value:"Routing middleware",id:"routing-middleware",level:3},{value:"Global middleware",id:"global-middleware",level:3},{value:"Return to unified processing",id:"return-to-unified-processing",level:2},{value:"Error handling",id:"error-handling",level:2},{value:"Cookie",id:"cookie",level:2},{value:"Session",id:"session",level:2},{value:"BodyParser",id:"bodyparser",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Default configuration",id:"default-configuration",level:3},{value:"Modify port",id:"modify-port",level:3},{value:"Global prefix",id:"global-prefix",level:3},{value:"Https configuration",id:"https-configuration",level:3},{value:"Modify context log",id:"modify-context-log",level:3}],d={toc:p};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"express"},"Express"),(0,a.kt)("p",null,"This chapter mainly introduces how to use Express as the upper-level framework in Midway and use its own capabilities."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Description"),(0,a.kt)("th",{parentName:"tr",align:null}))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Contains independent main framework"),(0,a.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"Contains independent logs"),(0,a.kt)("td",{parentName:"tr",align:null},"\u2705")))),(0,a.kt)("h2",{id:"installation-dependency"},"Installation dependency"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm i @midwayjs/express@3 --save\n$ npm i @types/body-parser @types/express @types/express-session --save-dev\n")),(0,a.kt)("p",null,"Or reinstall the following dependencies in ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "dependencies": {\n    "@midwayjs/express": "^3.0.0",\n    // ...\n  },\n  "devDependencies": {\n    "@types/body-parser": "^1.19.2",\n    "@types/express": "^4.17.13",\n    "@types/express-session": "^1.17.4",\n    // ...\n  }\n}\n')),(0,a.kt)("p",null,"Examples can also be created directly using scaffolding."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# npm v6\n$ npm init midway --type=express-v3 my_project\n\n# npm v7\n$ npm init midway -- --type=express-v3 my_project\n")),(0,a.kt)("p",null,"For Express,Midway provides ",(0,a.kt)("inlineCode",{parentName:"p"},"@midwayjs/express")," package for adaptation, in which Midway provides unique dependency injection, section and other capabilities."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The Express version we are using is ",(0,a.kt)("inlineCode",{parentName:"p"},"v4"),".")),(0,a.kt)("h2",{id:"directory-structure"},"Directory structure"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},".\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 controller                                              # controller cdoe\n\u2502   \u251c\u2500\u2500 service                                                     # service code\n|   \u2514\u2500\u2500 configuration.ts                                    # Entry, Lifecycle Configuration and Component Management\n\u251c\u2500\u2500 test\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 tsconfig.json\n")),(0,a.kt)("h2",{id:"open-the-component"},"Open the component"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Configuration, App } from '@midwayjs/core';\nimport * as express from '@midwayjs/express';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [express],\n  importConfigs: [join(__dirname, './config')],\n})\nexport class MainConfiguration {\n  @App()\n  app: express.Application;\n\n  async onReady() {}\n}\n")),(0,a.kt)("h2",{id:"controller"},"Controller"),(0,a.kt)("p",null,"The writing of the entire request controller is similar to that of Midway adapts to other frameworks. In order to be consistent with the frame writing of other scenes, Midway maps the ",(0,a.kt)("inlineCode",{parentName:"p"},"req")," of the Express to a ",(0,a.kt)("inlineCode",{parentName:"p"},"ctx")," object when requesting."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Inject, Controller, Get, Provide, Query } from '@midwayjs/core';\nimport { Context, NextFunction } from '@midwayjs/express';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  ctx: Context;\n\n  @Get('/')\n  async home(@Query() id) {\n    console.log(id);                        // req.query.id === id\n    return 'hello world';           // Simple return, equivalent to res.send('hello world');\n  }\n}\n")),(0,a.kt)("p",null,"You can also add ",(0,a.kt)("inlineCode",{parentName:"p"},"req")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"res"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Inject, Controller, Get, Provide, Query } from '@midwayjs/core';\nimport { Context, Response, NextFunction } from '@midwayjs/express';\n\n@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  ctx: Context; // is req\n\n  @Inject()\n  req: Context;\n\n  @Inject()\n  res: Response;\n\n  @Get('/')\n  async home(@Query() id) {\n    // this.req.query.id === id\n  }\n}\n")),(0,a.kt)("h2",{id:"web-middleware"},"Web middleware"),(0,a.kt)("p",null,"Express middleware is written in a special way, and its parameters are different."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Middleware } from '@midwayjs/core';\nimport { Context, Response, NextFunction } from '@midwayjs/express';\n\n@Middleware()\nexport class ReportMiddleware implements IMiddleware<Context, Response, NextFunction> {\n\n  resolve() {\n    return async (\n      req: Context,\n      res: Response,\n      next: NextFunction\n    ) => {\n      console.log('Request...');\n      next();\n    };\n  }\n\n}\n")),(0,a.kt)("p",null,"Note that we have exported a ",(0,a.kt)("inlineCode",{parentName:"p"},"ReportMiddleware")," class here. In order to facilitate the docking of asynchronous processes, the ",(0,a.kt)("inlineCode",{parentName:"p"},"resolve")," return can be an async function."),(0,a.kt)("p",null,"The next method in the Express is used to call the next middleware, which means that the Express middleware is not an onion model, but a one-way call."),(0,a.kt)("h3",{id:"routing-middleware"},"Routing middleware"),(0,a.kt)("p",null,"We can apply the middleware written above to a single Controller or to a single route."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Controller, Get, Provide } from '@midwayjs/core';\n\n@Controller('/', { middleware: [ ReportMiddleware ]}) // controller-level middleware\nexport class HomeController {\n\n  @Get('/', { middleware: [ ReportMiddleware ]}) // routing-level middleware\n  async home() {\n    return 'hello world'\n  }\n}\n")),(0,a.kt)("h3",{id:"global-middleware"},"Global middleware"),(0,a.kt)("p",null,"Directly use the ",(0,a.kt)("inlineCode",{parentName:"p"},"app.generateMiddleware")," method provided by Midway to load global middleware at the entrance."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/configuration.ts\nimport { Configuration, ILifeCycle } from '@midwayjs/core';\nimport * as express from '@midwayjs/express';\nimport { ReportMiddleware } from './middleware/report.middleware.ts'\n\n@Configuration({\n  imports: [express],\n})\nexport class ContainerLifeCycle implements ILifeCycle {\n\n  @App()\n  app: express.Application;\n\n  async onReady() {\n    this.app.useMiddleware(ReportMiddleware);\n  }\n}\n")),(0,a.kt)("p",null,"In addition to loading middleware in the form of Class, it also supports loading traditional Express middleware."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/configuration.ts\nimport { Configuration, App, ILifeCycle } from '@midwayjs/core';\nimport * as express from '@midwayjs/express';\nimport { join } from 'path';\n\n@Configuration({\n  imports: [express]\n})\nexport class ContainerLifeCycle implements ILifeCycle {\n\n  @App()\n  app: express.Application;\n\n  async onReady() {\n    this.app.useMiddleware((req, res, next) => {\n        // xxx\n    });\n  }\n}\n")),(0,a.kt)("p",null,"You can call methods on all Express by injecting ",(0,a.kt)("inlineCode",{parentName:"p"},"app")," objects."),(0,a.kt)("h2",{id:"return-to-unified-processing"},"Return to unified processing"),(0,a.kt)("p",null,"Since the Express middleware is a one-way call and cannot be executed on return, we have designed an additional filter decorated by ",(0,a.kt)("inlineCode",{parentName:"p"},"@Match")," to handle the behavior of the return value."),(0,a.kt)("p",null,"For example, we can define filters returned globally."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/filter/globalMatch.filter.ts\nimport { Match } from '@midwayjs/core';\nimport { Context, Response } from '@midwayjs/express';\n\n@Match()\nexport class GlobalMatchFilter {\n  match(value, req, res) {\n    // ...\n    return {\n      status: 200\n      data: {\n        value\n      },\n    };\n  }\n}\n")),(0,a.kt)("p",null,"You can also match a specific route for return."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/filter/api.filter.ts\nimport { Match } from '@midwayjs/core';\nimport { Context, Response } from '@midwayjs/express';\n\n@Match((ctx: Context, res: Response) => {\n  return ctx.path === '/api';\n})\nexport class APIMatchFilter {\n  match(value, req: Context, res: Response) {\n    // ...\n    return {\n      data: {\n        message:\n        data: value\n      },\n    };\n  }\n}\n")),(0,a.kt)("p",null,"It needs to be applied to app."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Configuration, App } from '@midwayjs/core';\nimport * as express from '@midwayjs/express';\nimport { join } from 'path';\nimport { APIMatchFilter } from './filter/api.filter';\nimport { GlobalMatchFilter } from 'filter/globalMatch.filter';\n\n@Configuration({\n  imports: [express],\n  importConfigs: [join(__dirname, './config')]\n})\nexport class ContainerLifeCycle {\n  @App()\n  app: express.Application;\n\n  async onReady() {\n    // ...\n    this.app.useFilter([APIMatchFilter, GlobalMatchFilter]);\n  }\n}\n")),(0,a.kt)("p",null,"Note that such filters are matched and executed in the order in which they are added."),(0,a.kt)("h2",{id:"error-handling"},"Error handling"),(0,a.kt)("p",null,"Same as ordinary items, using error filters, but the parameters are slightly different."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Catch } from '@midwayjs/core';\nimport { Context, Response } from '@midwayjs/express';\n\n@Catch()\nexport class GlobalError {\n  catch(err: Error, req: Context, res: Response) {\n    if (err) {\n      return {\n        status: err.status ?? 500,\n        message: err.message\n      }\n    }\n  }\n}\n")),(0,a.kt)("p",null,"It needs to be applied to app."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Configuration, App } from '@midwayjs/core';\nimport * as express from '@midwayjs/express';\nimport { join } from 'path';\nimport { GlobalError } from './filter/global.filter';\n\n@Configuration({\n  imports: [express]\n  importConfigs: [join(__dirname, './config')]\n})\nexport class ContainerLifeCycle {\n  @App()\n  app: express.Application;\n\n  async onReady() {\n    this.app.useMiddleware((req, res, next) => {\n      next();\n    });\n\n    this.app.useFilter([GlobalError]);\n  }\n}\n")),(0,a.kt)("p",null,"Note that both ",(0,a.kt)("inlineCode",{parentName:"p"},"@Match")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"@Catch")," are filters that are automatically executed internally. ."),(0,a.kt)("h2",{id:"cookie"},"Cookie"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"@midwayjs/express")," comes with the ",(0,a.kt)("inlineCode",{parentName:"p"},"cookie parser")," function and uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"cookie-parser")," module."),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"keys")," as the key for cookies."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default\nexport default {\n  keys: ['key1', 'key2']\n}\n")),(0,a.kt)("p",null,"Get Cookie."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"const cookieValue = req.cookies['cookie-key'];\n")),(0,a.kt)("p",null,"Set Cookie."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"res.cookie (\n  'cookie-key',\n  'cookie-value',\n  cookieOptions\n);\n")),(0,a.kt)("h2",{id:"session"},"Session"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"@midwayjs/express")," has built-in Session components, providing us with ",(0,a.kt)("inlineCode",{parentName:"p"},"ctx.session")," to access or modify the current user Session."),(0,a.kt)("p",null,"By default, ",(0,a.kt)("inlineCode",{parentName:"p"},"cookie-session")," is used. The default configuration is as follows."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default\nexport default {\n  session: {\n    name: 'MW_SESS',\n    resave: true\n    saveUninitialized: true\n    cookie: {\n      maxAge: 24*3600 * 1000, // ms\n      httpOnly: true\n      // sameSite: null\n    },\n  }\n}\n")),(0,a.kt)("p",null,"We can set the session through a simple API."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"@Controller('/')\nexport class HomeController {\n\n  @Inject()\n  req;\n\n  @Get('/')\n  async get() {\n    // set all\n    this.req.session = req.query;\n\n    // set value\n    this.req.session.key = 'abc';\n\n    // get\n    const key = this.req.session.key;\n\n    // remove\n    this.req.session = null;\n\n    // set max age\n    this.req.session.maxAge = Number(req.query.maxAge);\n\n    // ...\n  }\n}\n\n")),(0,a.kt)("h2",{id:"bodyparser"},"BodyParser"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"@midwayjs/express")," has its own ",(0,a.kt)("inlineCode",{parentName:"p"},"bodyParser")," function. By default, it parses ",(0,a.kt)("inlineCode",{parentName:"p"},"Post")," requests and automatically identifies ",(0,a.kt)("inlineCode",{parentName:"p"},"json"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"text"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"urlencoded")," types."),(0,a.kt)("p",null,"The default size is limited to ",(0,a.kt)("inlineCode",{parentName:"p"},"1mb"),". You can set the size of each item separately."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default\nexport default {\n  // ...\n  bodyParser: {\n    json: {\n      enable: true\n      limit: '1mb',\n      strict: true\n    },\n    raw: {\n      enable: false\n      limit: '1mb',\n    },\n    text: {\n      enable: true\n      limit: '1mb',\n    },\n    urlencoded: {\n      enable: true\n      extended: false\n      limit: '1mb',\n      parameterLimit: 1000\n    },\n  },\n}\n")),(0,a.kt)("h2",{id:"configuration"},"Configuration"),(0,a.kt)("h3",{id:"default-configuration"},"Default configuration"),(0,a.kt)("p",null,"The configuration sample of ",(0,a.kt)("inlineCode",{parentName:"p"},"@midwayjs/express")," is as follows:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default\nexport default {\n  // ...\n  express: {\n    port: 7001\n  },\n}\n")),(0,a.kt)("p",null,"All attributes are described as follows:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Property"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"port"),(0,a.kt)("td",{parentName:"tr",align:null},"number"),(0,a.kt)("td",{parentName:"tr",align:null},"Optional, port to start")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"globalPrefix"),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"optional. the global http prefix")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"keys"),(0,a.kt)("td",{parentName:"tr",align:null},"string []"),(0,a.kt)("td",{parentName:"tr",align:null},"Optional, Cookies signature, if the upper layer does not write keys, you can also set it here")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"hostname"),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"Optional. The hostname to listen to. Default 127.1")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"key"),(0,a.kt)("td",{parentName:"tr",align:null},"string ","|"," Buffer ","|"," Array<Buffer","|","Object>"),(0,a.kt)("td",{parentName:"tr",align:null},"Optional, Https key, server private key")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"cert"),(0,a.kt)("td",{parentName:"tr",align:null},"string ","|"," Buffer ","|"," Array<Buffer","|","Object>"),(0,a.kt)("td",{parentName:"tr",align:null},"Optional, Https cert, server certificate")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ca"),(0,a.kt)("td",{parentName:"tr",align:null},"string ","|"," Buffer ","|"," Array<Buffer","|","Object>"),(0,a.kt)("td",{parentName:"tr",align:null},"Optional, Https ca")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"http2"),(0,a.kt)("td",{parentName:"tr",align:null},"boolean"),(0,a.kt)("td",{parentName:"tr",align:null},"Optional, supported by http2, default false")))),(0,a.kt)("h3",{id:"modify-port"},"Modify port"),(0,a.kt)("p",null,"By default, we provide the ",(0,a.kt)("inlineCode",{parentName:"p"},"7001")," default port parameter in ",(0,a.kt)("inlineCode",{parentName:"p"},"config.default"),". by modifying it, we can modify the default port of Express http service."),(0,a.kt)("p",null,"For example, we changed it to ",(0,a.kt)("inlineCode",{parentName:"p"},"6001"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default\nexport default {\n  // ...\n  express: {\n    port: 6001\n  },\n}\n")),(0,a.kt)("p",null,"By default, our port configuration is ",(0,a.kt)("inlineCode",{parentName:"p"},"null")," because the single-test environment requires supertest to start the port."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.unittest\nexport default {\n  // ...\n  express: {\n    port: null\n  },\n}\n")),(0,a.kt)("p",null,"In addition, you can also temporarily modify the port by ",(0,a.kt)("inlineCode",{parentName:"p"},"midway-bin dev-ts-port = 6001"),", which overwrites the configured port."),(0,a.kt)("h3",{id:"global-prefix"},"Global prefix"),(0,a.kt)("p",null,"For more information about this feature, see ","[Global Prefixes]","(../controller# Global Routing Prefix)."),(0,a.kt)("h3",{id:"https-configuration"},"Https configuration"),(0,a.kt)("p",null,"In most cases, please use external agents as much as possible to complete the implementation of Https, such as Nginx."),(0,a.kt)("p",null,"In some special scenarios, you can directly turn on Https by configuring SSL certificates (TLS certificates)."),(0,a.kt)("p",null,"First, you must prepare certificate files in advance, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"ssl.key")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ssl.pem"),". The key is the private key of the server and the pem is the corresponding certificate."),(0,a.kt)("p",null,"Then configure it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default\nimport { readFileSync } from 'fs';\nimport { join } from 'path';\n\nexport default {\n  // ...\n  express: {\n    key: join(__dirname, '../ssl/ssl.key')\n    cert: join(__dirname, '../ssl/ssl.pem')\n  },\n}\n")),(0,a.kt)("h3",{id:"modify-context-log"},"Modify context log"),(0,a.kt)("p",null,"The context log of the express framework can be modified separately."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"export default {\n  express: {\n    contextLoggerFormat: info => {\n      // equivalent req\n      const req = info.ctx;\n      const userId = req?.['session']?.['userId'] || '-';\n      return '${info.timestamp} ${info.LEVEL} ${info.pid} [${userId} - ${Date.now() - req.startTime}ms ${req.method}] ${info.message}';\n    }\n    // ...\n  },\n};\n")))}c.isMDXComponent=!0}}]);