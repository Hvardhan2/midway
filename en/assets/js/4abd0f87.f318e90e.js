"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[67336],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,f=u["".concat(l,".").concat(m)]||u[m]||p[m]||i;return n?a.createElement(f,o(o({ref:t},d),{},{components:n})):a.createElement(f,o({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},47702:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var a=n(87462),r=(n(67294),n(3905));const i={},o="etcd",c={unversionedId:"extensions/etcd",id:"extensions/etcd",title:"etcd",description:"etcd is an important basic component in the cloud native architecture, hosted by CNCF incubation. etcd can be registered as a service in discovery in microservices and Kubernetes clusters, and can also be used as a middleware for key-value storage.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/extensions/etcd.md",sourceDirName:"extensions",slug:"/extensions/etcd",permalink:"/en/docs/extensions/etcd",draft:!1,editUrl:"https://github.com/midwayjs/midway/tree/main/site/docs/extensions/etcd.md",tags:[],version:"current",frontMatter:{},sidebar:"component",previous:{title:"Consul",permalink:"/en/docs/extensions/consul"},next:{title:"SocketIO",permalink:"/en/docs/extensions/socketio"}},l={},s=[{value:"Install dependencies",id:"install-dependencies",level:2},{value:"import component",id:"import-component",level:2},{value:"Configure the default client",id:"configure-the-default-client",level:2},{value:"Use the default client",id:"use-the-default-client",level:2},{value:"Multiple instance configuration",id:"multiple-instance-configuration",level:2},{value:"Get multiple instances",id:"get-multiple-instances",level:2},{value:"Create instance dynamically",id:"create-instance-dynamically",level:2}],d={toc:s};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"etcd"},"etcd"),(0,r.kt)("p",null,"etcd is an important basic component in the cloud native architecture, hosted by CNCF incubation. etcd can be registered as a service in discovery in microservices and Kubernetes clusters, and can also be used as a middleware for key-value storage."),(0,r.kt)("p",null,"Midway provides components packaged based on the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/microsoft/etcd3"},"etcd3")," module, which provides etcd client calling capabilities."),(0,r.kt)("p",null,"Related Information:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Available for Standard Items"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Available for Serverless"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Can be used for integration"),(0,r.kt)("td",{parentName:"tr",align:null},"\u2705")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"contains independent main frame"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Contains standalone logs"),(0,r.kt)("td",{parentName:"tr",align:null},"\u274c")))),(0,r.kt)("h2",{id:"install-dependencies"},"Install dependencies"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"$ npm i @midwayjs/etcd@3 --save\n")),(0,r.kt)("p",null,"Or add the following dependencies in ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," and reinstall."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "dependencies": {\n    "@midwayjs/etcd": "^3.0.0",\n    //...\n  },\n}\n')),(0,r.kt)("h2",{id:"import-component"},"import component"),(0,r.kt)("p",null,"First, import the component, import it in ",(0,r.kt)("inlineCode",{parentName:"p"},"configuration.ts"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Configuration } from '@midwayjs/core';\nimport * as etcd from '@midwayjs/etcd';\nimport { join } from 'path'\n\n@Configuration({\n  imports: [\n    //...\n    etcd,\n  ],\n  //...\n})\nexport class MainConfiguration {\n}\n")),(0,r.kt)("h2",{id:"configure-the-default-client"},"Configure the default client"),(0,r.kt)("p",null,"In most cases, we can only use the default client to complete the function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nexport default {\n  //...\n  etcd: {\n    client: {\n      host: [\n        '127.0.0.1:2379'\n      ]\n    },\n  },\n}\n")),(0,r.kt)("h2",{id:"use-the-default-client"},"Use the default client"),(0,r.kt)("p",null,"After the configuration is complete, we can use it in the code."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Provide } from '@midwayjs/core';\nimport { ETCDService } from '@midwayjs/etcd';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  etcdService: etcdService;\n\n  async invoke() {\n\n    await this.etcdService.put('foo').value('bar');\n\n    const fooValue = await this.etcdService.get('foo').string();\n    console.log('foo was:', fooValue);\n\n    const allFValues = await this.etcdService.getAll().prefix('f').keys();\n    console.log('all our keys starting with \"f\":', allFValues);\n\n    await this.etcdService.delete().all();\n  }\n}\n")),(0,r.kt)("p",null,"For more APIs, please refer to the ts definition or ",(0,r.kt)("a",{parentName:"p",href:"https://microsoft.github.io/etcd3/classes/etcd3.html"},"official document"),"."),(0,r.kt)("h2",{id:"multiple-instance-configuration"},"Multiple instance configuration"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"// src/config/config.default.ts\nexport default {\n  //...\n  etcd: {\n    clients: {\n      instance1: {\n        {\n          host: [\n            '127.0.0.1:2379'\n          ]\n        },\n      },\n  instance2: {\n        {\n          host: [\n            '127.0.0.1:2379'\n          ]\n        },\n      }\n    }\n  },\n}\n")),(0,r.kt)("h2",{id:"get-multiple-instances"},"Get multiple instances"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Provide } from '@midwayjs/core';\nimport { ETCDServiceFactory } from '@midwayjs/etcd';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  etcdServiceFactory: ETCDServiceFactory;\n\n  async invoke() {\n    const instance1 = this.etcdServiceFactory.get('instance1');\n    //...\n\n    const instance2 = this.etcdServiceFactory.get('instance2');\n    //...\n  }\n}\n")),(0,r.kt)("h2",{id:"create-instance-dynamically"},"Create instance dynamically"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Provide } from '@midwayjs/core';\nimport { ETCDServiceFactory } from '@midwayjs/etcd';\nimport { join } from 'path';\n\n@Provide()\nexport class UserService {\n\n  @Inject()\n  etcdServiceFactory: ETCDServiceFactory;\n\n  async invoke() {\n    const instance3 = await this.etcdServiceFactory.createInstance({\n      host: [\n        '127.0.0.1:2379'\n      ]\n    }, 'instance3');\n    //...\n  }\n}\n")))}p.isMDXComponent=!0}}]);